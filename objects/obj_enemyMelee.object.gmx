<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Settings
damage = 1;
MAX_RANGE = 256;
ENEMY_FOV = 90;
CHASING_SPEED = 100 / room_speed;
CHASING_RANGE = 320;
RESUME_TIME = 3 * room_speed;

// Defaults
actions = array(array(2, 1));

// Initialization
actionNumber = 0;
state = "actions";
resumeTimer = 0;
complete = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.DEAD == true) {
    speed = 0;
    image_speed = 0;
    exit;
}

var curAction = actions[actionNumber];
var player = instance_nearest(x, y, obj_player);

var canSeePlayer = can_see_inst(player, direction, MAX_RANGE, ENEMY_FOV);
if (state != "attack" &amp;&amp; canSeePlayer) {
    state = "attack";
}

if (state == "attack") {
    canSeePlayer = can_see_inst(player, direction, CHASING_RANGE, 360);
    if (canSeePlayer) {
        mp_potential_step_object(player.x, player.y, CHASING_SPEED, par_wall);
        direction = point_direction(xprevious, yprevious, x, y);
        resumeTimer = RESUME_TIME;
    } else {
        if (resumeTimer &gt; 0) {
            resumeTimer--;
        } else {
            state = "actions";
        }
    }
} else {
    
// Pre-defined action code //
    complete = enemy_perform_action(curAction);

    if (complete) {
        actionNumber++;
        
        if (actionNumber == array_length_1d(actions)) {
            actionNumber = 0;
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (get_setting("debugMode")) {
    var viewX = view_xview[0];
    var viewY = view_yview[0];
    
    draw_text(x - viewX, y - viewY + 10, "state: " + state);
    
    if (state == "attack") {
        draw_circle(x - viewX, y - viewY, CHASING_RANGE, true);
    } else {
        var startX = x + MAX_RANGE * cos(degtorad(direction - ENEMY_FOV / 2)) - viewX;
        var startY = y - MAX_RANGE * sin(degtorad(direction - ENEMY_FOV / 2)) - viewY;
        var endX = x + MAX_RANGE * cos(degtorad(direction + ENEMY_FOV / 2)) - viewX;
        var endY = y - MAX_RANGE * sin(degtorad(direction + ENEMY_FOV / 2)) - viewY;
        
        draw_line(x - viewX, y - viewY, startX, startY);
        draw_line(x - viewX, y - viewY, endX, endY);
        draw_arc(x - viewX - MAX_RANGE, y - viewY - MAX_RANGE,
                 x - viewX + MAX_RANGE, y - viewY + MAX_RANGE,
                    startX, startY, endX, endY, 24);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
