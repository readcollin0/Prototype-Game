<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>currentOption = "start";
wait = false;

// Settings
if (get_setting("debugMode")) {
    FADE_SPEED = 1;
    WAIT_TIME = 0;
    ACTION_DELAY = 0;
} else {
    FADE_SPEED = 1 / (.75 * room_speed);
    WAIT_TIME = 1 * room_speed;
    
    ACTION_DELAY = 1.5 * room_speed;
}

// Initialization
waitFrames = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (wait) {
    waitFrames--;
    if (waitFrames &lt;= 0) {
        switch (currentOption) {
            case "start": room_goto(startingRoom);
                break;
            case "quit": game_end();
                break;
        }
    }
} else if(keyboard_check_pressed(vk_space) || keyboard_check_pressed(vk_enter)) {
    audio_play_sound(sfx_menuSelect, 10, false);
    fade(FADE_SPEED, WAIT_TIME, FADE_SPEED);
    waitFrames = ACTION_DELAY;
    wait = true;
} else if (keyboard_check_pressed(vk_left) || keyboard_check_pressed(vk_right)) {
    audio_play_sound(sfx_menuChange, 10, false);
    if (currentOption == "start") {
        x = 576;
        currentOption = "quit";
    } else {
        currentOption = "start";
        x = 160;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
