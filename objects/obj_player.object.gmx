<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_playerStillRight</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Globals //
global.keys = ds_map_create();
global.DEAD = false;

// Player constants //
INVINCIBILITY_FRAMES = 2 * room_speed;
INV_GONE_FRAMES = (4/30) * room_speed;
INV_HERE_FRAMES = (11/30) * room_speed;
PLAYER_SPEED = 200 / room_speed;
MAX_HEALTH = 5;
image_speed = 1 / 15; // Animation speed, FPS

// Default settings //
dir = 2; // This is the default direction, right.
health = MAX_HEALTH;
invincibility = 0;
attacking = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (invincibility &gt; 0) {
    invincibility -= 1;
    if (invincibility % (INV_GONE_FRAMES + INV_HERE_FRAMES) &gt;= INV_HERE_FRAMES) {
        image_alpha = 0;
    } else {
        image_alpha = 1;
    }
} else {
    var enemyCollide = instance_place(x, y, par_enemy);
    if (enemyCollide != noone) {
        var enemyDamage = enemyCollide.damage;
        
        health -= enemyDamage;
        if (health &lt;= 0) {
            var dead = instance_create(0, 0, obj_dead);
            global.DEAD = true;
        } else {
            invincibility = INVINCIBILITY_FRAMES;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.DEAD) {
    speed = 0;
    image_speed = 0;
    exit;
}


var key_left = keyboard_check_direct(ord('A')) || keyboard_check_direct(vk_left);
var key_right = keyboard_check_direct(ord('D')) || keyboard_check_direct(vk_right);
var key_up = keyboard_check_direct(ord('W')) || keyboard_check_direct(vk_up);
var key_down = keyboard_check_direct(ord('S')) || keyboard_check_direct(vk_down);

var moveLeft = key_left &amp;&amp; !key_right;
var moveRight = key_right &amp;&amp; !key_left;
var moveUp = key_up &amp;&amp; !key_down;
var moveDown = key_down &amp;&amp; !key_up;

if (moveLeft) {
    set_sprite_tool(spr_playerWalkLeft);
    dir = 4;
} else if (moveRight) {
    set_sprite_tool(spr_playerWalkRight);
    dir = 2;
} else if (moveUp) {
    set_sprite_tool(spr_playerWalkUp);
    dir = 1;
} else if (moveDown) {
    set_sprite_tool(spr_playerWalkDown);
    dir = 3;
} else {
    switch (dir) {
        case 1: set_sprite_tool(spr_playerStillUp);
            break;
        case 2: set_sprite_tool(spr_playerStillRight);
            break;
        case 3: set_sprite_tool(spr_playerStillDown);
            break;
        case 4: set_sprite_tool(spr_playerStillLeft);
            break;
    }
}

if (moveLeft) {
    move_left_collide(PLAYER_SPEED, par_wall);
} else if (moveRight) {
    move_right_collide(PLAYER_SPEED, par_wall);
}

if (moveUp) {
    move_up_collide(PLAYER_SPEED, par_wall);
} else if (moveDown) {
    move_down_collide(PLAYER_SPEED, par_wall);
}


/*
grounded = instance_place(x, y+1, par_wall) != noone;

if (grounded) {
    vSpeed = 0;
}

if (key_up &amp;&amp; grounded) {
    grounded = false;
    vSpeed = jumpSpeed;
}

if (!grounded) {
    collided = move_up_collide(vSpeed, par_wall);
    vSpeed -= grav;    
    
    if (collided) {
        vSpeed = 0;
    }
}
*/

var key = instance_place(x, y, par_key);
if (key != noone) {
    ds_map_add(global.keys, key.keyId, true);
    instance_destroy(key);
}

if (keyboard_check_direct(vk_space) &amp;&amp; !attacking) {
    attacking = true;
    var weapon = instance_create(x, y, obj_swordBasic);
    weapon.parent = self;
    weapon.offset = pi * (dir/2 - 1);
    
    with weapon {
        var parX = parent.x;
        var parY = parent.y - 40;
        
        x = parX + SWING_RADIUS * cos(angle + offset);
        y = parY + SWING_RADIUS * sin(angle + offset);
        
        image_angle = point_direction(parX, parY, x, y) + IMAGE_ANGLE_OFFSET;
    }
}

/*animationTimer -= 1;
if (animationTimer == 0) {
    image_index += 1;
    if (image_index &gt; image_number) {
        image_index = 0;
    }
    
    animationTimer = animationTime;
}*/

depth = 1000 * y + 200


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
