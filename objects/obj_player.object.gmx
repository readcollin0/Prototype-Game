<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_playerWalk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.keys = ds_map_create();


playerSpeed = 200 / room_speed;

grav = 25 / room_speed;

vSpeed = 0;

jumpSpeed = 500 / room_speed;

image_speed = 1 / 15;

global.DEAD = false;

//animationTime = 50;
//animationTimer = animationTime;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.DEAD) {
    speed = 0;
    image_speed = 0;
    exit;
}


var key_left = keyboard_check_direct(ord('A')) || keyboard_check_direct(vk_left);
var key_right = keyboard_check_direct(ord('D')) || keyboard_check_direct(vk_right);
var key_up = keyboard_check_direct(ord('W')) || keyboard_check_direct(vk_up);
var key_down = keyboard_check_direct(ord('S')) || keyboard_check_direct(vk_down);

var moveLeft = key_left &amp;&amp; !key_right;
var moveRight = key_right &amp;&amp; !key_left;
var moveUp = key_up &amp;&amp; !key_down;
var moveDown = key_down &amp;&amp; !key_up;

if (moveLeft) {
    move_left_collide(playerSpeed, par_wall);
    set_sprite_tool(spr_playerWalk);
    image_xscale = -1;
} else if (moveRight) {
    move_right_collide(playerSpeed, par_wall);
    set_sprite_tool(spr_playerWalk);
    image_xscale = 1;
} else {
    sprite_index = spr_playerStill;
}

if (moveUp) {
    move_up_collide(playerSpeed, par_wall);
} else if (moveDown) {
    move_down_collide(playerSpeed, par_wall);
}


/*
grounded = instance_place(x, y+1, par_wall) != noone;

if (grounded) {
    vSpeed = 0;
}

if (key_up &amp;&amp; grounded) {
    grounded = false;
    vSpeed = jumpSpeed;
}

if (!grounded) {
    collided = move_up_collide(vSpeed, par_wall);
    vSpeed -= grav;    
    
    if (collided) {
        vSpeed = 0;
    }
}
*/

if (instance_place(x, y, par_enemy) != noone) {
    var dead = instance_create(0, 0, obj_dead);
    
    global.DEAD = true;
}

var key = instance_place(x, y, par_key);
if (key != noone) {
    ds_map_add(global.keys, key.keyId, true);
    instance_destroy(key);
}

/*animationTimer -= 1;
if (animationTimer == 0) {
    image_index += 1;
    if (image_index &gt; image_number) {
        image_index = 0;
    }
    
    animationTimer = animationTime;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (image_xscale == 1) {
    move_right_collide(10, par_wall);
} else {
    move_left_collide(10, par_wall);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
