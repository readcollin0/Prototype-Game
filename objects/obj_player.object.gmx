<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_playerWalk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>par_destructible</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Globals
global.keys = ds_map_create();
global.DEAD = false;
texture_set_interpolation(false);

// Settings
INVINCIBILITY_FRAMES = 2 * room_speed;
INV_GONE_FRAMES = (4/30) * room_speed;
INV_HERE_FRAMES = (11/30) * room_speed;
PLAYER_SPEED = 200 / room_speed;
MAX_HEALTH = 5;
SPEECH_BUBBLE_PADDING = 5;
SPEECH_BUBBLE_X_SIZE = 192;
SPEECH_BUBBLE_Y_OFFSET = -90;

ANIM_FRAMES = (1/5) * room_speed;

DRAW_HP_BAR = false;

// Defaults
dir = 2; // This is the default direction, right.
image_speed = 0; // Animation speed, FPS

// Initializations
attacking = false;
hp = MAX_HEALTH;
invincibility = 0;
speech = noone;
speechTime = 0;
anim_timer = 1;

global.player = self;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.DEAD) {
    speed = 0;
    image_speed = 0;
    exit;
}

if (invincibility &gt; 0) {
    invincibility -= 1;
    if (invincibility % (INV_GONE_FRAMES + INV_HERE_FRAMES) &gt;= INV_HERE_FRAMES) {
        image_alpha = 0;
    } else {
        image_alpha = 1;
    }
} else {
    var enemyCollide = instance_place(x, y, par_enemy);
    if (enemyCollide != noone &amp;&amp; !enemyCollide.dead) {
        var enemyDamage = enemyCollide.damage;
        
        hp -= enemyDamage;
        if (hp &gt; 0) {
            invincibility = INVINCIBILITY_FRAMES;
        }
    }
}

if (hp &lt;= 0) {
    var dead = instance_create(0, 0, obj_dead);
    global.DEAD = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.DEAD) {
    speed = 0;
    image_speed = 0;
    exit;
}


var key_left = keyboard_check_direct(ord('A')) || keyboard_check_direct(vk_left);
var key_right = keyboard_check_direct(ord('D')) || keyboard_check_direct(vk_right);
var key_up = keyboard_check_direct(ord('W')) || keyboard_check_direct(vk_up);
var key_down = keyboard_check_direct(ord('S')) || keyboard_check_direct(vk_down);

var moveLeft = key_left &amp;&amp; !key_right;
var moveRight = key_right &amp;&amp; !key_left;
var moveUp = key_up &amp;&amp; !key_down;
var moveDown = key_down &amp;&amp; !key_up;

if (moveLeft) {
    dir = 4;
} else if (moveRight) {
    dir = 2;
} else if (moveUp) {
    dir = 1;
} else if (moveDown) {
    dir = 3;
}

if (moveLeft) {
    move_left_collide(PLAYER_SPEED, par_wall);
} else if (moveRight) {
    move_right_collide(PLAYER_SPEED, par_wall);
}

if (moveUp) {
    move_up_collide(PLAYER_SPEED, par_wall);
} else if (moveDown) {
    move_down_collide(PLAYER_SPEED, par_wall);
}


/*
grounded = instance_place(x, y+1, par_wall) != noone;

if (grounded) {
    vSpeed = 0;
}

if (key_up &amp;&amp; grounded) {
    grounded = false;
    vSpeed = jumpSpeed;
}

if (!grounded) {
    collided = move_up_collide(vSpeed, par_wall);
    vSpeed -= grav;    
    
    if (collided) {
        vSpeed = 0;
    }
}
*/

var key = instance_place(x, y, par_key);
if (key != noone) {
    ds_map_add(global.keys, key.keyId, true);
    instance_destroy(key);
}

if (keyboard_check_direct(vk_space) &amp;&amp; !attacking) {
    attacking = true;
    var weapon = instance_create(x, y, obj_swordBasic);
    weapon.parent = self;
    weapon.offset = pi * (dir/2 - 1);
    
    with weapon {
        var parX = parent.x;
        var parY = parent.y - 40;
        
        x = parX + SWING_RADIUS * cos(angle + offset);
        y = parY + SWING_RADIUS * sin(angle + offset);
        
        image_angle = point_direction(parX, parY, x, y) + IMAGE_ANGLE_OFFSET;
    }
    
    audio_play_sound(sfx_swordSwing, 10, false);
}

/*animationTimer -= 1;
if (animationTimer == 0) {
    image_index += 1;
    if (image_index &gt; image_number) {
        image_index = 0;
    }
    
    animationTimer = animationTime;
}*/

var animStart = (dir - 1) * 4;

if (moveLeft || moveRight || moveUp || moveDown) {
    var animEnd = animStart + 3;
    if (image_index % 2 == 0 &amp;&amp; anim_timer == ANIM_FRAMES / 2) {
        audio_play_sound(sfx_step, 10, false);
    }
} else {
    animStart++;
    var animEnd = animStart;
}

sprite_anim_tool(animStart, animEnd, ANIM_FRAMES);

depth = -(100 * y + 50)


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_health();

if (speech != noone) {
    if (speechTime &gt; 0) {
        var viewX = view_xview[0];
        var viewY = view_yview[0];
        draw_set_alpha(.5);
        var x1 = x - viewX - (speechWidth/2);
        var y1 = y - viewY + SPEECH_BUBBLE_Y_OFFSET - speechHeight;
        var x2 = x - viewX + (speechWidth/2);
        var y2 = y - viewY + SPEECH_BUBBLE_Y_OFFSET;
        draw_rectangle_colour(x1 - SPEECH_BUBBLE_PADDING, y1 - SPEECH_BUBBLE_PADDING,
                                x2 + SPEECH_BUBBLE_PADDING, y2 + SPEECH_BUBBLE_PADDING,
                                c_black, c_black, c_black, c_black, false);
        draw_set_alpha(1);
        draw_text(x1, y1, speech);
        
        speechTime--;
    } else {
        speech = noone;
        speechTime = -1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
